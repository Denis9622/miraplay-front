import { createAsyncThunk } from "@reduxjs/toolkit";
import api from "../axiosInstance";
import { setAuthHeader } from "../axiosInstance";

// üìå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const registerUser = createAsyncThunk(
  "auth/register",
  async (userData, { rejectWithValue }) => {
    try {
      const response = await api.post("/auth/register", userData);
      const { id, name, email, accessToken } = response.data.data;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      localStorage.setItem("user", JSON.stringify({ id, name, email }));
      localStorage.setItem("token", accessToken);

      setAuthHeader(accessToken);

      return { id, name, email, accessToken };
    } catch (error) {
      console.error(
        "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
        error.response?.data || error.message
      );
      return rejectWithValue(error.response?.data || "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
    }
  }
);

// üìå –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const loginUser = createAsyncThunk(
  "auth/login",
  async (credentials, { rejectWithValue }) => {
    try {
      const response = await api.post("/auth/login", credentials);
      console.log("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response.data);

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞
      const { data } = response.data;
      const { accessToken } = data;

      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞
      const tokenPayload = JSON.parse(atob(accessToken.split(".")[1]));
      const user = {
        id: tokenPayload.userId,
        email: credentials.email,
        name: credentials.email.split("@")[0], // –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      localStorage.setItem("user", JSON.stringify(user));
      localStorage.setItem("token", accessToken);
      localStorage.setItem("refreshToken", data.refreshToken);

      setAuthHeader(accessToken);

      return {
        user,
        accessToken,
        refreshToken: data.refreshToken,
      };
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:", error.response?.data || error.message);
      return rejectWithValue(error.response?.data || "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞");
    }
  }
);

// üìå –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const logoutUser = createAsyncThunk(
  "auth/logout",
  async (_, { rejectWithValue }) => {
    try {
      const refreshToken = localStorage.getItem("refreshToken");

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
      const response = await api.post(
        "/auth/logout",
        {},
        refreshToken
          ? { headers: { Authorization: `Bearer ${refreshToken}` } }
          : {}
      );

      // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      localStorage.removeItem("token");
      localStorage.removeItem("refreshToken");
      localStorage.removeItem("user");
      sessionStorage.clear();

      return response.data;
    } catch (error) {
      if (error.response?.data?.message === "Invalid refresh token") {
        // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–º refresh token
        localStorage.removeItem("token");
        localStorage.removeItem("refreshToken");
        localStorage.removeItem("user");
        sessionStorage.clear();
      }
      console.error("–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:", error.response?.data || error.message);
      return rejectWithValue(error.response?.data || "–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞");
    }
  }
);

// üìå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
export const refreshToken = createAsyncThunk(
  "auth/refreshToken",
  async (_, { rejectWithValue }) => {
    try {
      const refreshToken = localStorage.getItem("refreshToken");
      if (!refreshToken) {
        throw new Error("–ù–µ—Ç refresh token");
      }

      const response = await api.post(
        "/auth/refresh",
        {},
        { headers: { Authorization: `Bearer ${refreshToken}` } }
      );
      const newAccessToken = response.data.accessToken;

      localStorage.setItem("token", newAccessToken);
      setAuthHeader(newAccessToken);

      return newAccessToken;
    } catch (error) {
      // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      localStorage.removeItem("token");
      localStorage.removeItem("refreshToken");
      localStorage.removeItem("user");
      sessionStorage.clear();
      return rejectWithValue("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞.");
    }
  }
);
