import { io } from "socket.io-client";
import { store } from "../redux/store";

class SocketService {
  constructor() {
    this.socket = null;
    this.isConnecting = false;
    this.eventHandlers = new Map();
    this.onlineUsersCallback = null;
  }

  connect() {
    if (this.isConnecting) {
      console.log("üîÑ [SOCKET] –£–∂–µ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...");
      return;
    }

    if (this.socket?.connected) {
      console.log("‚úÖ [SOCKET] –£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω");
      return;
    }

    this.isConnecting = true;
    console.log("üîÑ [SOCKET] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...");

    const user = store.getState().auth.user;
    if (!user) {
      console.error("‚ùå [SOCKET] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
      this.isConnecting = false;
      return;
    }

    this.socket = io("https://miraplay-back.onrender.com", {
      transports: ["websocket", "polling"],
      reconnection: true,
      reconnectionAttempts: 5,
      reconnectionDelay: 1000,
      reconnectionDelayMax: 5000,
      timeout: 20000,
      withCredentials: true,
      auth: {
        token: localStorage.getItem("token"),
        user: user,
      },
    });

    this.socket.on("connect", () => {
      console.log("‚úÖ [SOCKET] –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É");
      this.isConnecting = false;
      this.emitUserLogin(user);
    });

    this.socket.on("connect_error", (error) => {
      console.error("‚ùå [SOCKET] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", error);
      this.isConnecting = false;
      if (error.message.includes("Unauthorized")) {
        store.dispatch({ type: "auth/clearAuthState" });
      }
    });

    this.socket.on("disconnect", (reason) => {
      console.log("üîå [SOCKET] –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", reason);
      this.isConnecting = false;
    });

    this.socket.on("onlineUsers", (users) => {
      console.log("üë• [SOCKET] –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", users);
      if (this.onlineUsersCallback) {
        this.onlineUsersCallback(users);
      }
    });

    return this.socket;
  }

  disconnect() {
    if (this.socket) {
      console.log("üîå [SOCKET] –û—Ç–∫–ª—é—á–µ–Ω–∏–µ...");
      this.socket.disconnect();
      this.socket = null;
    }
  }

  emitUserLogin(user) {
    if (!this.socket?.connected) {
      console.log("üîÑ [SOCKET] –°–æ–∫–µ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...");
      this.connect();
    }

    console.log("üì§ [SOCKET] –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", user);
    this.socket?.emit("userLogin", user);
  }

  emitUserLogout(userId) {
    if (!this.socket?.connected) {
      console.log("üîÑ [SOCKET] –°–æ–∫–µ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—ã—Ö–æ–¥–∞");
      return;
    }

    console.log("üì§ [SOCKET] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤—ã—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userId);
    this.socket?.emit("userLogout", userId);
    this.disconnect();
  }

  subscribeToOnlineUsers(callback) {
    if (!this.socket?.connected) {
      console.log("üîÑ [SOCKET] –°–æ–∫–µ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...");
      this.connect();
    }

    this.onlineUsersCallback = callback;
    console.log("üë• [SOCKET] –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
    this.socket?.emit("getUserList");
  }

  unsubscribeFromOnlineUsers() {
    this.onlineUsersCallback = null;
    this.socket?.off("userList");
  }

  subscribe(event, callback) {
    if (!this.socket?.connected) {
      console.log("üîÑ [SOCKET] –°–æ–∫–µ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...");
      this.connect();
    }

    if (!this.eventHandlers.has(event)) {
      this.eventHandlers.set(event, new Set());
    }

    const handlers = this.eventHandlers.get(event);
    handlers.add(callback);

    this.socket?.on(event, callback);
  }

  unsubscribe(event, callback) {
    if (!this.socket) return;

    if (callback) {
      const handlers = this.eventHandlers.get(event);
      if (handlers) {
        handlers.delete(callback);
        this.socket.off(event, callback);
      }
    } else {
      this.eventHandlers.delete(event);
      this.socket.off(event);
    }
  }
}

export const socketService = new SocketService();
